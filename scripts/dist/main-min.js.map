{"version":3,"sources":["main.js"],"names":["ready","fn","document","readyState","addEventListener","attachEvent","readyWrap","button","getElementsByClassName","feedbackContainer","inputs","getElementsByTagName","inspectionForm","logoNav","security","formConnectionManager","navigator","onLine","feedback","createElement","setAttribute","className","innerHTML","appendChild","hasChildNodes","removeChild","firstChild","removeAttribute","serviceWorker","register","then","registration","console","log","scope","catch","e","length","window","location","i","target","chars","size","value","preventDefault","AJAX","XMLHttpRequest","payload","FormData","status","ga","hitType","eventCategory","eventAction","eventLabel","querySelector","reset","open","send"],"mappings":"AAAA,aAIA,SAASA,MAAMC,GACe,YAAxBC,SAASC,WACXF,IACSC,SAASE,iBAClBF,SAASE,iBAAiB,mBAAoBH,GAE9CC,SAASG,YAAY,qBAAsB,WACb,YAAxBH,SAASC,YACXF,MAMR,SAASK,YACP,IAAIC,EAASL,SAASM,uBAAuB,eAAe,GACxDC,EAAoBP,SAASM,uBAAuB,iBACpDE,EAASR,SAASS,qBAAqB,SACvCC,EAAiBV,SAASM,uBAAuB,mBACjDK,EAAUX,SAASM,uBAAuB,WAC1CM,EAAWZ,SAASM,uBAAuB,iBA2E/C,SAASO,IACP,IAAyB,IAArBC,UAAUC,OAAkB,CAC9B,IAAIC,EAAWhB,SAASiB,cAAc,KAOtC,OALAZ,EAAOa,aAAa,WAAY,QAChCb,EAAOc,UAAY,8BAEnBH,EAASG,UAAY,mBACrBH,EAASI,UAAY,qPACdb,EAAkB,GAAGc,YAAYL,GAE1C,KAAOT,EAAkB,GAAGe,iBAC1Bf,EAAkB,GAAGgB,YAAYhB,EAAkB,GAAGiB,YAKxD,OAFAnB,EAAOoB,gBAAgB,YACvBpB,EAAOc,UAAY,qBACZd,EAAOc,UAWhB,GApGI,kBAAmBL,WAErBA,UAAUY,cAAcC,SAAS,oBAAoBC,KAAK,SAAUC,GAClEC,QAAQC,IAAI,qDAAuDF,EAAaG,SAC/EC,MAAM,SAAUC,GACjBJ,QAAQC,IAAI,sCAAwCG,KAyFpDvB,EAAQwB,QACVxB,EAAQ,GAAGT,iBAAiB,QAAS,WACnCkC,OAAOC,SAAW,0BAIlB7B,EAAO2B,OAAQ,CAEjB,IAAK,IAAIG,EAAI,EAAGA,EAAI9B,EAAO2B,OAAQG,GAAK,EACtC9B,EAAO8B,GAAGpC,iBAAiB,QAAS,SAAUgC,GA9FlD,IAA8BK,EAExBC,EACAC,EAHwBF,EA+FHL,EAAEK,OA7FvBC,EAAQD,EAAOG,MAAMP,OACrBM,EAAOF,EAAOE,KACdD,EAAQC,GAEVF,EAAOE,KAAOF,EAAOG,MAAMP,OACpBI,EAAOE,MACLD,EAAQC,GAAQD,EAPhB,IASTD,EAAOE,KAAOF,EAAOG,MAAMP,OACpBI,EAAOE,OAEhBF,EAAOE,KAZI,GAaJF,EAAOE,QAqFd/B,EAAe,GAAGR,iBAAiB,SAAU,SAAUgC,GAErD,OADAA,EAAES,iBAlFAC,EAAO,IAAIC,eACX7B,EAAWhB,SAASiB,cAAc,KAClC6B,EAAU,IAAIC,SAASrC,EAAe,SAGtCE,EAAS,GAAG8B,OAEd1B,EAASG,UAAY,iBACrBH,EAASI,UAAY,+LACrBb,EAAkB,GAAGc,YAAYL,MAER,IAArBF,UAAUC,SACZC,EAASG,UAAY,mBACrBH,EAASI,UAAY,qPACrBb,EAAkB,GAAGc,YAAYL,IAGnC4B,EAAK1C,iBAAiB,OAAQ,SAAUgC,GACd,MAApBA,EAAEK,OAAOS,QAEXhC,EAASG,UAAY,mBACrBH,EAASI,UAAY,yBACrBb,EAAkB,GAAGc,YAAYL,GAEjCiC,GAAG,OAAQ,CACTC,QAAS,QACTC,cAAe,OACfC,YAAa,OACbC,WAAY,iBAGdrD,SAASsD,cAAc,oBAAoBC,UAG3CvC,EAASG,UAAY,mBACrBH,EAASI,UAAY,wMACrBb,EAAkB,GAAGc,YAAYL,MAIrC4B,EAAKY,KAAK,OArCF,wCAqCe,GACvBZ,EAAKa,KAAKX,KA1Cd,IACMF,EACA5B,EACA8B,IAoFJV,OAAOlC,iBAAiB,SAAUW,GAElCuB,OAAOlC,iBAAiB,UAAWW,IAIvCf,MAAMM","sourcesContent":["/* eslint-env browser */\n/* global ga */\nfunction ready(fn) {\n  if (document.readyState !== 'loading') {\n    fn();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    document.attachEvent('onreadystatechange', () => {\n      if (document.readyState !== 'loading') {\n        fn();\n      }\n    });\n  }\n}\n\nfunction readyWrap() {\n  const button = document.getElementsByClassName('form_submit')[0];\n  const feedbackContainer = document.getElementsByClassName('form_feedback');\n  const inputs = document.getElementsByTagName('input');\n  const inspectionForm = document.getElementsByClassName('inspection_form');\n  const logoNav = document.getElementsByClassName('logoNav');\n  const security = document.getElementsByClassName('form_security');\n\n  // Register the ServiceWorker.\n  if ('serviceWorker' in navigator) {\n    // The service worker cannot access parent directories (apart from explicity setting scope), so keep it in the root directory.\n    navigator.serviceWorker.register('serviceWorker.js').then((registration) => {\n      console.log(`ServiceWorker registration successful with scope: ${registration.scope}`);\n    }).catch((e) => {\n      console.log(`ServiceWorker registration failed: ${e}`);\n    });\n  }\n\n  function inputWidthController(target) {\n    const base = 25; // base size for all inputs\n    const chars = target.value.length;\n    const size = target.size;\n    if (chars > size) { // if the input needs to expand\n      target.size = target.value.length; // expand it\n      return target.size;\n    } else if (chars < size && chars > base) { // if the input contains less than its width and still has more than 15 characters\n      target.size = target.value.length; // shrink it\n      return target.size;\n    } // otherwise\n    target.size = base; // set to the base width\n    return target.size;\n  }\n\n  function sendReport() {\n    const AJAX = new XMLHttpRequest();\n    const feedback = document.createElement('p');\n    const payload = new FormData(inspectionForm[0]);\n    const URL = 'https://message.integrisweb.com/sms/';\n\n    if (security[0].value) { // if the security input has a value, it's been filled\n      feedback.className = 'feedback_error';\n      feedback.innerHTML = \"Sorry for the inconvenience, but you somehow triggered our anti-spam protection. Please use the contact information at the <a data-scroll href='#footer'>bottom of the page</a> to reach us.\";\n      feedbackContainer[0].appendChild(feedback);\n    } else {\n      if (navigator.onLine === false) {\n        feedback.className = 'feedback_warning';\n        feedback.innerHTML = \"Sorry for the inconvenience, but you are currently offline. You can't send a message while offline. You can wait until you are back online or use the contact information at the <a data-scroll href='#footer'>bottom of the page</a> to reach us.\";\n        feedbackContainer[0].appendChild(feedback);\n      }\n\n      AJAX.addEventListener('load', (e) => {\n        if (e.target.status === 200) { // if the message was sent\n          feedback.className = 'feedback_success';\n          feedback.innerHTML = 'Your message was sent!';\n          feedbackContainer[0].appendChild(feedback);\n\n          ga('send', { // since GA is loaded in the head, assume its presence\n            hitType: 'event',\n            eventCategory: 'Form',\n            eventAction: 'send',\n            eventLabel: 'Contact Form',\n          });\n\n          document.querySelector('.inspection_form').reset(); // empty the form on success\n        } else { // something nonspecific has gone wrong\n          feedback.className = 'feedback_warning';\n          feedback.innerHTML = \"Sorry for the inconvenience, but your message may have not sent. You can try sending it again or use the contact information at the <a data-scroll href='#footer'>bottom of the page</a> to reach us.\";\n          feedbackContainer[0].appendChild(feedback);\n        }\n      });\n\n      AJAX.open('POST', URL, true);\n      AJAX.send(payload);\n    }\n  }\n\n  function formConnectionManager() {\n    if (navigator.onLine === false) {\n      const feedback = document.createElement('p');\n\n      button.setAttribute('disabled', 'true');\n      button.className = 'button form_submit disabled';\n\n      feedback.className = 'feedback_warning';\n      feedback.innerHTML = \"Sorry for the inconvenience, but you are currently offline. You can't send a message while offline. You can wait until you are back online or use the contact information at the <a data-scroll href='#footer'>bottom of the page</a> to reach us.\";\n      return feedbackContainer[0].appendChild(feedback);\n    }\n    while (feedbackContainer[0].hasChildNodes()) {\n      feedbackContainer[0].removeChild(feedbackContainer[0].firstChild);\n    }\n\n    button.removeAttribute('disabled');\n    button.className = 'button form_submit';\n    return button.className;\n  }\n\n  /* event listeners & function calls */\n\n  if (logoNav.length) {\n    logoNav[0].addEventListener('click', () => {\n      window.location = 'https://sewercam.net/';\n    });\n  }\n\n  if (inputs.length) { // the only page with a form is 'your-sewer-scope.html'\n    for (let i = 0; i < inputs.length; i += 1) {\n      inputs[i].addEventListener('input', (e) => {\n        inputWidthController(e.target);\n      });\n    }\n\n    inspectionForm[0].addEventListener('submit', (e) => {\n      e.preventDefault();\n      return sendReport();\n    });\n\n    window.addEventListener('online', formConnectionManager);\n\n    window.addEventListener('offline', formConnectionManager);\n  }\n}\n\nready(readyWrap);\n"],"file":"main-min.js"}